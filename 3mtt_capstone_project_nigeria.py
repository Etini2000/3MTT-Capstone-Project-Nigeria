# -*- coding: utf-8 -*-
"""3MTT Capstone Project Nigeria

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FZO9D7LFd4mmZfzIL11iC1x9ted1EVjG
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns

url = 'https://docs.google.com/spreadsheets/d/12xpuFKhX43Cf5ntc-CFnjKXSvtPEzW_9aA0FPr7AvW0/export?format=csv'
capstone = pd.read_csv(url)
capstone.head()

capstone.info()

capstone.isnull().sum()

capstone.columns

#extracting data for Nigeria alone
Nigeria = capstone[capstone['Country/Region'] == 'Nigeria']
Nigeria.head()

reset_index = Nigeria.reset_index(drop = True)
Nigeria = reset_index

#Dropping some columns
Nigeria = Nigeria.drop(columns = ['Country/Region', 'WHO Region'])

Nigeria.info()

Nigeria['Date'] = pd.to_datetime(Nigeria['Date'])
Nigeria['Month'] = Nigeria['Date'].dt.month
Nigeria.info()

import calendar

Nigeria['Month_Name'] = Nigeria['Month'].apply(lambda x: calendar.month_name[x])


Nigeria['Month_Name'] = [x.strftime('%B') for x in Nigeria['Date']]
Nigeria.head()

#visualizations
plt.figure(figsize = (12, 6))
plt.plot(Nigeria['Date'], Nigeria['Confirmed'], label = 'Confirmed')
plt.plot(Nigeria['Date'], Nigeria['Deaths'], label = 'Deaths')
plt.plot(Nigeria['Date'], Nigeria['Recovered'], label = 'Recovered')
plt.title('Trend in COVID-19 Cases in Nigeria')
plt.xlabel('Date')
plt.ylabel('Number of Cases')
plt.grid(False)
plt.legend()
plt.show()

factors = ['Confirmed', 'Deaths', 'Recovered', 'Active', 'New cases', 'New deaths', 'New recovered']
Nigeria = Nigeria.set_index('Date')

for factor in factors:
  plt.figure(figsize = (10, 6))
  plt.plot(Nigeria.index, Nigeria[factor])
  plt.title(f'Trend of {factor} cases')
  plt.xlabel('Months')
  plt.ylabel(factor)
  plt.xticks(rotation = 45)
  plt.grid(False)
  plt.show()

# Group data by month and sum the relevant columns
monthly_data = Nigeria.groupby('Month')[['Confirmed', 'Deaths', 'Recovered', 'Active']].sum()

# Create a bar plot to visualize trends
monthly_data.plot(kind='bar', figsize=(10, 6))
plt.title('Monthly Trends of COVID-19 Cases in Nigeria')
plt.xlabel('Month')
plt.ylabel('Number of Cases')
plt.xticks(rotation=0)
plt.legend(loc='upper left')
plt.savefig('Monthly Trends of COVID-19 Cases in Nigeria.png')
plt.show()

#Correlation analysis
corr_data = Nigeria.drop(columns = ['Date', 'Month'])

sns.heatmap(corr_data.corr(), annot = True, cmap = 'coolwarm')
plt.title('Correlation Heatmap')
plt.savefig('Correlation Heatmap.png')
plt.show()

sns.regplot(data=corr_data.corr(), x='Confirmed', y='Deaths')
plt.title('Correlation between Confirmed Cases and Deaths')
plt.savefig('Correlation between Confirmed Cases and Deaths.png')
plt.show()

sns.regplot(data=corr_data.corr(), x='Confirmed', y='Recovered')
plt.title('Correlation between Confirmed Cases and Recovered Cases')
plt.savefig('Correlation between Confirmed Cases and Recovered Cases.png')
plt.show()

sns.regplot(data=corr_data.corr(), x='New cases', y='New deaths')
plt.title('Correlation between New Confirmed Cases and New Deaths Cases')
plt.savefig('Correlation between New Confirmed Cases and New Deaths Cases.png')
plt.show()

sns.regplot(data=corr_data.corr(), x='Active', y='Deaths')
plt.savefig('Correlation between Active Cases and Deaths.png')
plt.title('Correlation between Active Cases and Deaths')
plt.show()

#Feature Engineering
Nigeria['Growth_rate'] = Nigeria['Confirmed'].pct_change() * 100
Nigeria['Mortality_rate'] = (Nigeria['Deaths']/ Nigeria['Confirmed']) * 100
Nigeria['Recovery_rate'] = (Nigeria['Recovered']/ Nigeria['Confirmed']) * 100
Nigeria['Active_case_ratio'] = (Nigeria['Active']/ Nigeria['Confirmed']) * 100

Nig_population = 206606300
Nig_total_test = 306894
Nigeria['New_case_per_100k'] = (Nigeria['New cases']/ Nig_population) * 100000
Nigeria['Test_per_confirmed_cases'] = Nig_total_test/ (Nigeria['Confirmed'])
Nigeria.head()

Nigeria.info()

Nig_data = Nigeria.fillna(0)
Nig_data.head()

Nig_data['Test_per_confirmed_cases'] = Nig_data['Test_per_confirmed_cases'].replace([np.inf, -np.inf], 0)

Nig_data.head(3)

Nig_data.info()

# Select columns with float64 dtype
float64_cols = Nig_data.select_dtypes(include=['float64']).columns

# Replace inf and -inf with NaN so they can be handled by fillna
Nig_data[float64_cols] = Nig_data[float64_cols].replace([np.inf, -np.inf], np.nan)

# Fill NaN values with 0 before converting to int64
Nig_data[float64_cols] = Nig_data[float64_cols].fillna(0).astype('int64')

# Verify the changes
Nig_data.info()

Nig_data.head(2)

#Predictive modeling
x = Nig_data.drop(columns = ['Date', 'Confirmed'], axis = 1)
y = Nig_data['Confirmed']

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)

lm = LinearRegression()
lm.fit(x_train, y_train)

predictions = lm.predict(x_test)

#Model evaluation
mse = mean_squared_error(y_test, predictions)
r2 = r2_score(y_test, predictions)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

